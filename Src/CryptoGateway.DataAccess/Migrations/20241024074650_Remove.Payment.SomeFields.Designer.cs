// <auto-generated />
using System;
using CryptoGateway.DataAccess.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CryptoGateway.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241024074650_Remove.Payment.SomeFields")]
    partial class RemovePaymentSomeFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CryptoGateway.Domain.Entities.ApiKey.ApiKey", b =>
                {
                    b.Property<int>("ApiKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiKeyId"));

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("KeyValue");

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ApiKeyId");

                    b.HasIndex("UserId");

                    b.ToTable("ApiKey", "Base");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.BankAccount.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankAccountId"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<byte>("BankType")
                        .HasColumnType("tinyint")
                        .HasColumnName("Type");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("varchar")
                        .HasColumnName("CardNumber");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnName("State");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BankAccountId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("UserId");

                    b.ToTable("BankAccount", "Base");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.ContractAccount.ContractAccount", b =>
                {
                    b.Property<int>("ContractAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractAccountId"));

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.HasKey("ContractAccountId");

                    b.ToTable("ContractAccount", "Contract");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.ContractTransaction.ContractTransaction", b =>
                {
                    b.Property<int>("ContractTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractTransactionId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(24,12)");

                    b.Property<decimal?>("BandwidthFee")
                        .HasColumnType("decimal(24,12)");

                    b.Property<int?>("BandwidthUsage")
                        .HasColumnType("int");

                    b.Property<int>("ContractAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ContractAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractResource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EnergyFee")
                        .HasColumnType("decimal(24,12)");

                    b.Property<int?>("EnergyUsage")
                        .HasColumnType("int");

                    b.Property<long?>("Expiration")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("FeeLimit")
                        .HasColumnType("decimal(24,12)");

                    b.Property<string>("FromAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GasLimit")
                        .HasColumnType("int");

                    b.Property<decimal?>("GasPrice")
                        .HasColumnType("decimal(24,12)");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("OwnerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefBlockBytes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefBlockHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("ToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TxId");

                    b.HasKey("ContractTransactionId");

                    b.HasIndex("ContractAccountId");

                    b.ToTable("ContractTransaction", "Contract");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Currency.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("Code");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency", "Base");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.CustodyAccount.CustodyAccount", b =>
                {
                    b.Property<int>("CustodyAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustodyAccountId"));

                    b.Property<int>("ContractAccountId")
                        .HasColumnType("int");

                    b.Property<byte>("CurrencyType")
                        .HasColumnType("tinyint")
                        .HasColumnName("CurrencyType");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CustodyAccountId");

                    b.HasIndex("ContractAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("CustodyAccount", "Payment");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Notification.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<byte>("ActionType")
                        .HasColumnType("tinyint")
                        .HasColumnName("ActionType");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<byte>("PriorityType")
                        .HasColumnType("tinyint")
                        .HasColumnName("PriorityType");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("SentAt");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("Type");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", "Messaging");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.PayIn.PayIn", b =>
                {
                    b.Property<int>("PayInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayInId"));

                    b.Property<int>("CustodyAccountId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiredAt");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnName("State");

                    b.Property<byte>("TransferType")
                        .HasColumnType("tinyint")
                        .HasColumnName("TransferType");

                    b.Property<string>("TxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TxId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PayInId");

                    b.HasIndex("CustodyAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("PayIn", "Payment");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Payment.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("CustodyAccountId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerContact")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CustomerContact");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OrderId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustodyAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment", "Payment");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Payout.Payout", b =>
                {
                    b.Property<int>("PayoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayoutId"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnName("State");

                    b.Property<byte>("TransferType")
                        .HasColumnType("tinyint")
                        .HasColumnName("TransferType");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("PayoutId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("Payout", "Payment");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Transaction.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<byte>("ActionType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UserCreditId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("UserCreditId");

                    b.ToTable("Transaction", "Payment");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", "Base");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.UserCredit.UserCredit", b =>
                {
                    b.Property<int>("UserCreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCreditId"));

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserCreditId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCredit", "Base");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Wallet.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Address");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnName("State");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet", "Base");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "Identity");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.ApiKey.ApiKey", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CryptoGateway.Domain.Entities.ApiKey.ValueObjects.ApiKeyId", "Id", b1 =>
                        {
                            b1.Property<int>("ApiKeyId")
                                .HasColumnType("int");

                            b1.HasKey("ApiKeyId");

                            b1.ToTable("ApiKey", "Base");

                            b1.WithOwner()
                                .HasForeignKey("ApiKeyId");
                        });

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.BankAccount.BankAccount", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CryptoGateway.Domain.Entities.BankAccount.ValueObjects.AccountNumber", "AccountNumber", b1 =>
                        {
                            b1.Property<int>("BankAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(18)
                                .HasColumnType("varchar")
                                .HasColumnName("AccountNumber");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccount", "Base");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.BankAccount.ValueObjects.BankAccountDesc", "Desc", b1 =>
                        {
                            b1.Property<int>("BankAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(70)
                                .HasColumnType("nvarchar")
                                .HasColumnName("Desc");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccount", "Base");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.BankAccount.ValueObjects.BankAccountId", "Id", b1 =>
                        {
                            b1.Property<int>("BankAccountId")
                                .HasColumnType("int");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccount", "Base");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.BankAccount.ValueObjects.BankAccountTitle", "BankAccountTitle", b1 =>
                        {
                            b1.Property<int>("BankAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar")
                                .HasColumnName("Title");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccount", "Base");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.BankAccount.ValueObjects.Sheba", "Sheba", b1 =>
                        {
                            b1.Property<int>("BankAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(26)
                                .HasColumnType("varchar")
                                .HasColumnName("Sheba");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccount", "Base");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.Navigation("AccountNumber")
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("BankAccountTitle")
                        .IsRequired();

                    b.Navigation("Desc")
                        .IsRequired();

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("Sheba")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.ContractAccount.ContractAccount", b =>
                {
                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.IsActive", "IsActive", b1 =>
                        {
                            b1.Property<int>("ContractAccountId")
                                .HasColumnType("int");

                            b1.Property<bool>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("IsActive");

                            b1.HasKey("ContractAccountId");

                            b1.ToTable("ContractAccount", "Contract");

                            b1.WithOwner()
                                .HasForeignKey("ContractAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.ContractAccount.ValueObjects.ContractAccountId", "Id", b1 =>
                        {
                            b1.Property<int>("ContractAccountId")
                                .HasColumnType("int");

                            b1.HasKey("ContractAccountId");

                            b1.ToTable("ContractAccount", "Contract");

                            b1.WithOwner()
                                .HasForeignKey("ContractAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.ContractAccount.ValueObjects.ContractAddress", "Address", b1 =>
                        {
                            b1.Property<int>("ContractAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Base58Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AddressBase58");

                            b1.Property<string>("HexValue")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AddressHex");

                            b1.HasKey("ContractAccountId");

                            b1.ToTable("ContractAccount", "Contract");

                            b1.WithOwner()
                                .HasForeignKey("ContractAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.ContractAccount.ValueObjects.PrivateKey", "PrivateKey", b1 =>
                        {
                            b1.Property<int>("ContractAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PrivateKey");

                            b1.HasKey("ContractAccountId");

                            b1.ToTable("ContractAccount", "Contract");

                            b1.WithOwner()
                                .HasForeignKey("ContractAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.ContractAccount.ValueObjects.PublicKey", "PublicKey", b1 =>
                        {
                            b1.Property<int>("ContractAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PublicKey");

                            b1.HasKey("ContractAccountId");

                            b1.ToTable("ContractAccount", "Contract");

                            b1.WithOwner()
                                .HasForeignKey("ContractAccountId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("IsActive")
                        .IsRequired();

                    b.Navigation("PrivateKey")
                        .IsRequired();

                    b.Navigation("PublicKey")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.ContractTransaction.ContractTransaction", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.ContractAccount.ContractAccount", "ContractAccount")
                        .WithMany("ContractTransactions")
                        .HasForeignKey("ContractAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CryptoGateway.Domain.Entities.ContractTransaction.ValueObjects.ContractTransactionId", "Id", b1 =>
                        {
                            b1.Property<int>("ContractTransactionId")
                                .HasColumnType("int");

                            b1.HasKey("ContractTransactionId");

                            b1.ToTable("ContractTransaction", "Contract");

                            b1.WithOwner()
                                .HasForeignKey("ContractTransactionId");
                        });

                    b.Navigation("ContractAccount");

                    b.Navigation("Id")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Currency.Currency", b =>
                {
                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.IsActive", "IsActive", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit")
                                .HasColumnName("IsActive");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Network", "Network", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(50)
                                .HasColumnType("varchar")
                                .HasColumnName("Network");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.CurrencyFullName", "FullName", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar")
                                .HasColumnName("FullName");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.CurrencyNameFa", "NameFa", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar")
                                .HasColumnName("NameFa");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.DecimalPlaces", "DecimalPlaces", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<byte>("Value")
                                .HasColumnType("tinyint")
                                .HasColumnName("DecimalPlaces");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.IsDepositable", "IsDepositable", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit")
                                .HasColumnName("IsDepositable");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.IsFiat", "IsFiat", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit")
                                .HasColumnName("IsFiat");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.IsTradable", "IsTradable", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit")
                                .HasColumnName("IsTradable");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.IsWithdrawable", "IsWithdrawable", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit")
                                .HasColumnName("IsWithdrawable");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.LogoUrl", "LogoUrl", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LogoUrl");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.MinimumAmount", "MinimumAmount", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(24,12)")
                                .HasColumnName("MinimumAmount");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.MinimumDeposit", "MinimumDeposit", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(24,12)")
                                .HasColumnName("MinimumDeposit");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.MinimumWithdraw", "MinimumWithdraw", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(24,12)")
                                .HasColumnName("MinimumWithdraw");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.NetworkTransferFee", "NetworkTransferFee", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(24,12)")
                                .HasColumnName("NetworkTransferFee");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Currency.ValueObjects.Priority", "Priority", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.Property<byte>("Value")
                                .HasColumnType("tinyint")
                                .HasColumnName("Priority");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.CurrencyId", "Id", b1 =>
                        {
                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.HasKey("CurrencyId");

                            b1.ToTable("Currency", "Base");

                            b1.WithOwner()
                                .HasForeignKey("CurrencyId");
                        });

                    b.Navigation("DecimalPlaces")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("IsActive")
                        .IsRequired();

                    b.Navigation("IsDepositable")
                        .IsRequired();

                    b.Navigation("IsFiat")
                        .IsRequired();

                    b.Navigation("IsTradable")
                        .IsRequired();

                    b.Navigation("IsWithdrawable")
                        .IsRequired();

                    b.Navigation("LogoUrl")
                        .IsRequired();

                    b.Navigation("MinimumAmount")
                        .IsRequired();

                    b.Navigation("MinimumDeposit")
                        .IsRequired();

                    b.Navigation("MinimumWithdraw")
                        .IsRequired();

                    b.Navigation("NameFa")
                        .IsRequired();

                    b.Navigation("Network")
                        .IsRequired();

                    b.Navigation("NetworkTransferFee")
                        .IsRequired();

                    b.Navigation("Priority")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.CustodyAccount.CustodyAccount", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.ContractAccount.ContractAccount", "ContractAccount")
                        .WithMany()
                        .HasForeignKey("ContractAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.IsActive", "IsActive", b1 =>
                        {
                            b1.Property<int>("CustodyAccountId")
                                .HasColumnType("int");

                            b1.Property<bool>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("IsActive");

                            b1.HasKey("CustodyAccountId");

                            b1.ToTable("CustodyAccount", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("CustodyAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.CustodyAccount.ValueObjects.CustodyAccExternalId", "CustodyAccExternalId", b1 =>
                        {
                            b1.Property<int>("CustodyAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(27)
                                .HasColumnType("nvarchar(27)")
                                .HasColumnName("CustodyAccExternalId");

                            b1.HasKey("CustodyAccountId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("CustodyAccount", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("CustodyAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.CustodyAccount.ValueObjects.CustodyAccountTitle", "Title", b1 =>
                        {
                            b1.Property<int>("CustodyAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("CustodyAccountId");

                            b1.ToTable("CustodyAccount", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("CustodyAccountId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.CustodyAccountId", "Id", b1 =>
                        {
                            b1.Property<int>("CustodyAccountId")
                                .HasColumnType("int");

                            b1.HasKey("CustodyAccountId");

                            b1.ToTable("CustodyAccount", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("CustodyAccountId");
                        });

                    b.Navigation("ContractAccount");

                    b.Navigation("CustodyAccExternalId")
                        .IsRequired();

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("IsActive")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Notification.Notification", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CryptoGateway.Domain.Entities.Notification.ValueObjects.IsSent", "IsSent", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<bool>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("IsSent");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification", "Messaging");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Notification.ValueObjects.IsSuccess", "IsSuccess", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<bool>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("IsSuccess");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification", "Messaging");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Notification.ValueObjects.NotificationId", "Id", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification", "Messaging");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Notification.ValueObjects.NotificationText", "Text", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Text");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification", "Messaging");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Notification.ValueObjects.Receiver", "Receiver", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Receiver");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification", "Messaging");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Notification.ValueObjects.SendStatus", "SendStatus", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SendStatus");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification", "Messaging");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Notification.ValueObjects.TryCount", "TryCount", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<byte>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("tinyint")
                                .HasDefaultValue((byte)0)
                                .HasColumnName("TryCount");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification", "Messaging");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("IsSent")
                        .IsRequired();

                    b.Navigation("IsSuccess");

                    b.Navigation("Receiver")
                        .IsRequired();

                    b.Navigation("SendStatus")
                        .IsRequired();

                    b.Navigation("Text")
                        .IsRequired();

                    b.Navigation("TryCount")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.PayIn.PayIn", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.CustodyAccount.CustodyAccount", "CustodyAccount")
                        .WithMany()
                        .HasForeignKey("CustodyAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Money", "Value", b1 =>
                        {
                            b1.Property<int>("PayInId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(24,12)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Value");

                            b1.Property<byte>("CurrencyType")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("tinyint")
                                .HasDefaultValue((byte)0)
                                .HasColumnName("CurrencyType");

                            b1.HasKey("PayInId");

                            b1.ToTable("PayIn", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PayInId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.PayIn.ValueObjects.PayInDesc", "PayInDesc", b1 =>
                        {
                            b1.Property<int>("PayInId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PayInDesc");

                            b1.HasKey("PayInId");

                            b1.ToTable("PayIn", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PayInId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.PayIn.ValueObjects.PayInId", "Id", b1 =>
                        {
                            b1.Property<int>("PayInId")
                                .HasColumnType("int");

                            b1.HasKey("PayInId");

                            b1.ToTable("PayIn", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PayInId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Payment.ValueObjects.Commission", "Commission", b1 =>
                        {
                            b1.Property<int>("PayInId")
                                .HasColumnType("int");

                            b1.HasKey("PayInId");

                            b1.ToTable("PayIn", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PayInId");

                            b1.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Money", "FixedValue", b2 =>
                                {
                                    b2.Property<int>("CommissionPayInId")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("Amount")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("decimal(24,12)")
                                        .HasDefaultValue(0m)
                                        .HasColumnName("ComFixedValue");

                                    b2.Property<byte>("CurrencyType")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("tinyint")
                                        .HasDefaultValue((byte)0)
                                        .HasColumnName("ComCurrencyType");

                                    b2.HasKey("CommissionPayInId");

                                    b2.ToTable("PayIn", "Payment");

                                    b2.WithOwner()
                                        .HasForeignKey("CommissionPayInId");
                                });

                            b1.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Money", "Percentage", b2 =>
                                {
                                    b2.Property<int>("CommissionPayInId")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("Amount")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("decimal(24,12)")
                                        .HasDefaultValue(0m)
                                        .HasColumnName("ComPercentage");

                                    b2.HasKey("CommissionPayInId");

                                    b2.ToTable("PayIn", "Payment");

                                    b2.WithOwner()
                                        .HasForeignKey("CommissionPayInId");
                                });

                            b1.Navigation("FixedValue")
                                .IsRequired();

                            b1.Navigation("Percentage")
                                .IsRequired();
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.CustomerContact", "CustomerContact", b1 =>
                        {
                            b1.Property<int>("PayInId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerContact");

                            b1.HasKey("PayInId");

                            b1.ToTable("PayIn", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PayInId");
                        });

                    b.Navigation("Commission")
                        .IsRequired();

                    b.Navigation("CustodyAccount");

                    b.Navigation("CustomerContact")
                        .IsRequired();

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("PayInDesc")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Payment.Payment", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.CustodyAccount.CustodyAccount", "CustodyAccount")
                        .WithMany()
                        .HasForeignKey("CustodyAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Money", "Pay", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(24,12)")
                                .HasDefaultValue(0m)
                                .HasColumnName("PayAmount");

                            b1.Property<byte>("CurrencyType")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("tinyint")
                                .HasDefaultValue((byte)0)
                                .HasColumnName("PayCurrencyType");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payment", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(24,12)")
                                .HasDefaultValue(0m)
                                .HasColumnName("PriceAmount");

                            b1.Property<byte>("CurrencyType")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("tinyint")
                                .HasDefaultValue((byte)0)
                                .HasColumnName("PriceCurrencyType");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payment", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Money", "SpotUsdtPrice", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(24,12)")
                                .HasDefaultValue(0m)
                                .HasColumnName("SpotUsdtPrice");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payment", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Payment.ValueObjects.CallBackUrl", "CallBackUrl", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CallBackUrl");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payment", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Payment.ValueObjects.ExpirationDateMi", "ExpiredAt", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpiredAt");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payment", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Payment.ValueObjects.OrderDescription", "OrderDescription", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("OrderDesc");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payment", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Payment.ValueObjects.PaymentExternalId", "PaymentExternalId", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(27)
                                .HasColumnType("nvarchar(27)")
                                .HasColumnName("PaymentExternalId");

                            b1.HasKey("PaymentId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Payment", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Payment.ValueObjects.PaymentId", "Id", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("int");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payment", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("CallBackUrl")
                        .IsRequired();

                    b.Navigation("CustodyAccount");

                    b.Navigation("ExpiredAt")
                        .IsRequired();

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("OrderDescription")
                        .IsRequired();

                    b.Navigation("Pay")
                        .IsRequired();

                    b.Navigation("PaymentExternalId")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("SpotUsdtPrice")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Payout.Payout", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CryptoGateway.Domain.Entities.BankAccount.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CryptoGateway.Domain.Entities.Wallet.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Money", "Value", b1 =>
                        {
                            b1.Property<int>("PayoutId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(24,12)")
                                .HasColumnName("Value");

                            b1.Property<byte>("CurrencyType")
                                .HasColumnType("tinyint")
                                .HasColumnName("CurrencyType");

                            b1.HasKey("PayoutId");

                            b1.ToTable("Payout", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PayoutId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Payout.ValueObjects.BankTrackingCode", "BankTrackingCode", b1 =>
                        {
                            b1.Property<int>("PayoutId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BankTrackingCode");

                            b1.HasKey("PayoutId");

                            b1.ToTable("Payout", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PayoutId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Payout.ValueObjects.PayoutDesc", "Desc", b1 =>
                        {
                            b1.Property<int>("PayoutId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(70)
                                .HasColumnType("nvarchar")
                                .HasColumnName("Desc");

                            b1.HasKey("PayoutId");

                            b1.ToTable("Payout", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PayoutId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Payout.ValueObjects.PayoutId", "Id", b1 =>
                        {
                            b1.Property<int>("PayoutId")
                                .HasColumnType("int");

                            b1.HasKey("PayoutId");

                            b1.ToTable("Payout", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PayoutId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Payout.ValueObjects.TransactionUrl", "TransactionUrl", b1 =>
                        {
                            b1.Property<int>("PayoutId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TransactionUrl");

                            b1.HasKey("PayoutId");

                            b1.ToTable("Payout", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("PayoutId");
                        });

                    b.Navigation("Approver");

                    b.Navigation("BankAccount");

                    b.Navigation("BankTrackingCode")
                        .IsRequired();

                    b.Navigation("Desc")
                        .IsRequired();

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("TransactionUrl")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Value")
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Transaction.Transaction", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.UserCredit.UserCredit", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserCreditId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Money", "Balance", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(24,12)")
                                .HasColumnName("Balance");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Money", "Value", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(24,12)")
                                .HasColumnName("Value");

                            b1.Property<byte>("CurrencyType")
                                .HasColumnType("tinyint")
                                .HasColumnName("CurrencyType");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Transaction.ValueObjects.ReferenceName", "ReferenceName", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar")
                                .HasColumnName("ReferenceName");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Transaction.ValueObjects.ReferenceNumber", "ReferenceNumber", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("ReferenceNumber");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Transaction.ValueObjects.TransactionId", "Id", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Transaction.ValueObjects.TransactionNote", "Note", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar")
                                .HasColumnName("Note");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction", "Payment");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("Note")
                        .IsRequired();

                    b.Navigation("ReferenceName")
                        .IsRequired();

                    b.Navigation("ReferenceNumber")
                        .IsRequired();

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.User.User", b =>
                {
                    b.OwnsOne("CryptoGateway.Domain.Entities.User.ValueObjects.BirthDate", "BirthDate", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Value")
                                .HasColumnType("datetime2")
                                .HasColumnName("BirthDate");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "Base");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.User.ValueObjects.FirstName", "FirstName", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar")
                                .HasColumnName("FirstName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "Base");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.User.ValueObjects.LastName", "LastName", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "Base");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.User.ValueObjects.MobileNumber", "MobileNumber", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<long?>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("MobileNumber");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasFilter("[MobileNumber] IS NOT NULL");

                            b1.ToTable("User", "Base");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.User.ValueObjects.NationalCode", "NationalCode", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(10)
                                .HasColumnType("varchar")
                                .HasColumnName("NationalCode");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "Base");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.User.ValueObjects.Salt", "Salt", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(8)
                                .HasColumnType("char")
                                .HasColumnName("Salt");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "Base");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.User.ValueObjects.UserExternalId", "UserExternalId", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(27)
                                .HasColumnType("nvarchar(27)")
                                .HasColumnName("UserExternalId");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "Base");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("BirthDate")
                        .IsRequired();

                    b.Navigation("FirstName")
                        .IsRequired();

                    b.Navigation("LastName")
                        .IsRequired();

                    b.Navigation("MobileNumber")
                        .IsRequired();

                    b.Navigation("NationalCode")
                        .IsRequired();

                    b.Navigation("Salt")
                        .IsRequired();

                    b.Navigation("UserExternalId")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.UserCredit.UserCredit", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.User.User", null)
                        .WithMany("UserCredits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Money", "RealCredit", b1 =>
                        {
                            b1.Property<int>("UserCreditId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(24,12)")
                                .HasColumnName("Value");

                            b1.Property<byte>("CurrencyType")
                                .HasColumnType("tinyint")
                                .HasColumnName("CurrencyType");

                            b1.HasKey("UserCreditId");

                            b1.ToTable("UserCredit", "Base");

                            b1.WithOwner()
                                .HasForeignKey("UserCreditId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.UserCredit.ValueObjects.UserCreditId", "Id", b1 =>
                        {
                            b1.Property<int>("UserCreditId")
                                .HasColumnType("int");

                            b1.HasKey("UserCreditId");

                            b1.ToTable("UserCredit", "Base");

                            b1.WithOwner()
                                .HasForeignKey("UserCreditId");
                        });

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("RealCredit")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.Wallet.Wallet", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CryptoGateway.Domain.Entities.Currency.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CryptoGateway.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CryptoGateway.Domain.Entities.Wallet.ValueObjects.MemoAddress", "MemoAddress", b1 =>
                        {
                            b1.Property<int>("WalletId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(100)
                                .HasColumnType("varchar")
                                .HasColumnName("Memo");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallet", "Base");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Wallet.ValueObjects.TagAddress", "TagAddress", b1 =>
                        {
                            b1.Property<int>("WalletId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(100)
                                .HasColumnType("varchar")
                                .HasColumnName("Tag");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallet", "Base");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Wallet.ValueObjects.WalletDesc", "Desc", b1 =>
                        {
                            b1.Property<int>("WalletId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasMaxLength(70)
                                .HasColumnType("nvarchar")
                                .HasColumnName("Desc");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallet", "Base");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Wallet.ValueObjects.WalletId", "Id", b1 =>
                        {
                            b1.Property<int>("WalletId")
                                .HasColumnType("int");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallet", "Base");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Wallet.ValueObjects.WalletTitle", "WalletTitle", b1 =>
                        {
                            b1.Property<int>("WalletId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar")
                                .HasColumnName("Title");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallet", "Base");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.OwnsOne("CryptoGateway.Domain.Entities.Shared.ValueObjects.Network", "Network", b1 =>
                        {
                            b1.Property<int>("WalletId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("varchar")
                                .HasColumnName("Network");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallet", "Base");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.Navigation("Approver");

                    b.Navigation("Currency");

                    b.Navigation("Desc")
                        .IsRequired();

                    b.Navigation("Id")
                        .IsRequired();

                    b.Navigation("MemoAddress")
                        .IsRequired();

                    b.Navigation("Network")
                        .IsRequired();

                    b.Navigation("TagAddress")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WalletTitle")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CryptoGateway.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CryptoGateway.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.ContractAccount.ContractAccount", b =>
                {
                    b.Navigation("ContractTransactions");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.User.User", b =>
                {
                    b.Navigation("UserCredits");
                });

            modelBuilder.Entity("CryptoGateway.Domain.Entities.UserCredit.UserCredit", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
